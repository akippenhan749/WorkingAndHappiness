labs(title='Average Annual Time Spent Working per Country') +
theme(plot.title=element_text(size=20), # increase text size of map title
legend.title=element_text(size=16), # increase text size of map legend title
legend.text=element_text(size=14), # increase text size of map legend
legend.key.height=unit(0.5,'in'), # increase height of map legend key
legend.key.width=unit(0.5,'in'), # increase width of map legend key
axis.title.x=element_blank(), # remove axes, labels and background
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.background=element_blank())
})
}
shinyApp(ui=ui, server=server)
# Chunk 5
# bind happiness dataframes for each year into one dataframe
happinessData <- bind_rows(happinessData2015, happinessData2016, happinessData2017, happinessData2018, happinessData2019)
happinessData <- happinessData[order(happinessData$Happiness.Score),] # sort happinessData dataframe by Happiness.Score
happinessPlot <- happinessData %>%
plot_ly(
x=~`Happiness.Score`, # select x-axis data
y=~`Country`, # select y-axis data
color=~`Region`, # color each bar by the region corresponding to the country it represents
frame=~`Year`, # animate plot by year from 2015 to 2019
text=~paste(Happiness.Score), # allow the exact happiness score value to be identified when hovering over each bar
hoverinfo='text',
type='bar', # specify the type of plot
height=800, # specify the plot height so all country names are shown
orientation='h') %>% # specify horizontal orientation for the plot
layout(title='<b>Happiness Score per Country<b>',
xaxis=list(title='Overall Happiness Score'), # add title for x-axis
yaxis=list(title='', # y-axis has a blank title
categoryarray=~`Happiness.Score`,
categoryorder='array'),
legend=list(title=list(text='<b>Region</b>'))) # "<b>" is used to bold the text
happinessPlot
# bind happiness dataframes for each year into one dataframe
happinessData <- bind_rows(happinessData2015, happinessData2016, happinessData2017, happinessData2018, happinessData2019)
happinessData <- happinessData[order(happinessData$Happiness.Score),] # sort happinessData dataframe by Happiness.Score
happinessPlot <- happinessData %>%
plot_ly(
x=~`Happiness.Score`, # select x-axis data
y=~`Country`, # select y-axis data
color=~`Region`, # color each bar by the region corresponding to the country it represents
frame=~`Year`, # animate plot by year from 2015 to 2019
text=~paste(Happiness.Score), # allow the exact happiness score value to be identified when hovering over each bar
hoverinfo='text',
type='bar', # specify the type of plot
height=800, # specify the plot height so all country names are shown
orientation='h') %>% # specify horizontal orientation for the plot
layout(title='<b>Happiness Score per Country<b>',
xaxis=list(title='Overall Happiness Score'), # add title for x-axis
yaxis=list(title='', # y-axis has a blank title
categoryarray=~`Happiness.Score`,
categoryorder='array'),
legend=list(title=list(text='<b>Region</b>'))) # "<b>" is used to bold the text
happinessPlot
happinessData <- bind_rows(happinessData2015, happinessData2016, happinessData2017, happinessData2018, happinessData2019)
happinessData <- happinessData[order(happinessData$Happiness.Score),] # sort happinessData dataframe by Happiness.Score
happinessPlot <- happinessData %>%
plot_ly(
x=~`Happiness.Score`, # select x-axis data
y=~`Country`, # select y-axis data
color=~`Region`, # color each bar by the region corresponding to the country it represents
frame=~`Year`, # animate plot by year from 2015 to 2019
text=~paste(Happiness.Score), # allow the exact happiness score value to be identified when hovering over each bar
hoverinfo='text',
type='bar', # specify the type of plot
height=800, # specify the plot height so all country names are shown
orientation='h') %>% # specify horizontal orientation for the plot
layout(title='<b>Happiness Score per Country<b>',
xaxis=list(title='Overall Happiness Score'), # add title for x-axis
yaxis=list(title='', # y-axis has a blank title
categoryarray=~`Happiness.Score`,
categoryorder='array'),
legend=list(title=list(text='<b>Region</b>'))) # "<b>" is used to bold the text
happinessPlot
# Chunk 1
library(tidyverse)
# read in the OECD data on time spent working per country, remove duplicate employment type data for applicable countries, select data concerning country name, year and working time only, remove Turkey as it has NAs and rename applicable columns
workData=read.csv('data/ANHRS_21042021234045409.csv') %>% distinct(`Country`, `Time`, .keep_all=TRUE) %>%
select(2,8,15) %>%
filter(`Country`!='Turkey') %>%
rename(`AvgHrsWorked`=`Value`,
`Year`=`Time`)
# adjust country names to match in both dataframes
workData$Country[workData$Country=='Korea'] <- 'South Korea'
workData$Country[workData$Country=='Russian Federation'] <- 'Russia'
workData$Country[workData$Country=='Slovak Republic'] <- 'Slovakia'
# make a dataframe for each relevant year in workData
workData %>% filter(`Year`==2015) -> workData2015
workData %>% filter(`Year`==2016) -> workData2016
workData %>% filter(`Year`==2017) -> workData2017
workData %>% filter(`Year`==2018) -> workData2018
workData %>% filter(`Year`==2019) -> workData2019
# read in World Happiness Report data from 2015 to 2019, filter for countries in the workData dataframe and select columns with relevant data
happinessData2015=read.csv('data/2015.csv') %>% filter(`Country` %in% workData$Country) %>%
select(1,2,3,4,8,9,11)
happinessData2015$Year=2015 # add a Year column to specify the year of the data for animation purposes
happinessData2016=read.csv('data/2016.csv') %>% filter(`Country` %in% workData$Country) %>%
select(1,2,3,4,9,10,12)
happinessData2016$Year=2016 # add a Year column to specify the year of the data for animation purposes
happinessData2017=read.csv('data/2017.csv') %>% filter(`Country` %in% workData$Country)
happinessData2017$Year=2017 # add a Year column to specify the year of the data for animation purposes
# create a regions dataframe to allow for regions in happiness data for 2017 to 2019
regions=happinessData2016 %>% select(1,2)
happinessData2017 <- inner_join(regions, happinessData2017, by='Country')
happinessData2017 %>% select(1,2,3,4,9,10,11,14) -> happinessData2017
happinessData2018=read.csv('data/2018.csv') %>% filter(`Country.or.region` %in% workData$Country) %>%
rename(`Happiness.Rank`=`Overall.rank`,
`Country`=`Country.or.region`,
`Happiness.Score`=`Score`,
`Health..Life.Expectancy.`=`Healthy.life.expectancy`,
`Freedom`=`Freedom.to.make.life.choices`)
happinessData2018$Year=2018 # add a Year column to specify the year of the data for animation purposes
happinessData2018 <- inner_join(regions, happinessData2018, by='Country')
happinessData2018 %>% select(1,2,3,4,7,8,9,11) -> happinessData2018
happinessData2019=read.csv('data/2019.csv') %>% filter(`Country.or.region` %in% workData$Country) %>%
rename(`Happiness.Rank`=`Overall.rank`,
`Country`=`Country.or.region`,
`Happiness.Score`=`Score`,
`Health..Life.Expectancy.`=`Healthy.life.expectancy`,
`Freedom`=`Freedom.to.make.life.choices`)
happinessData2019$Year=2019 # add a Year column to specify the year of the data for animation purposes
happinessData2019 <- inner_join(regions, happinessData2019, by='Country')
happinessData2019 %>% select(1,2,3,4,7,8,9,11) -> happinessData2019
# join the work and happiness dataframe together for each year by Country
workAndHappinessData2015 <- inner_join(workData2015, happinessData2015, by='Country') %>% select(-2) %>%
rename(`Year`=`Year.y`)
workAndHappinessData2016 <- inner_join(workData2016, happinessData2016, by='Country') %>% select(-2) %>%
rename(`Year`=`Year.y`)
workAndHappinessData2017 <- inner_join(workData2017, happinessData2017, by='Country') %>% select(-2) %>%
rename(`Year`=`Year.y`)
workAndHappinessData2018 <- inner_join(workData2018, happinessData2018, by='Country') %>% select(-2) %>%
rename(`Year`=`Year.y`)
workAndHappinessData2019 <- inner_join(workData2019, happinessData2019, by='Country') %>% select(-2) %>%
rename(`Year`=`Year.y`)
# bind work and happiness dataframes for each year into one dataframe and move AvgHrsWorked column to position 3 using dplyr::relocate
workAndHappinessData <- bind_rows(workAndHappinessData2015, workAndHappinessData2016, workAndHappinessData2017, workAndHappinessData2018, workAndHappinessData2019) %>% relocate(`AvgHrsWorked`, .after=3)
# Chunk 2
library(plotly)
# remove OECD countries data
workData %>% filter(`Country`!='OECD countries') -> workData
# join the regions dataframe to the workData dataframe
workData <- inner_join(regions, workData, by='Country')
workData <- workData[order(workData$AvgHrsWorked),] # sort the workData dataframe by AvgHrsWorked
workingTimePlot <- workData %>%
plot_ly(
x=~`AvgHrsWorked`, # select x-axis data
y=~`Country`, # select y-axis data
color=~`Region`, # color each bar by the region corresponding to the country it represents
frame=~`Year`, # animate plot by year from 2000 to 2019
text=~paste(AvgHrsWorked, ' hrs'), # allow the exact working hours value to be identified when hovering over each bar
hoverinfo='text',
type='bar', # specify the type of plot
height=800, # specify the plot height so all country names are shown
orientation='h') %>% # specify horizontal orientation for the plot
layout(title='<b>Average Annual Time Spent Working per Country<b>',
xaxis=list(title='Average Annual Time Spent Working (hours)'), # add title for x axis
yaxis=list(title='', # y-axis has a blank title
categoryarray=~`AvgHrsWorked`,
categoryorder='array'),
legend=list(title=list(text='<b>Region</b>'))) # "<b>" is used to bold the text
workingTimePlot
# Chunk 3
library(maps)
world <- map_data('world') %>% filter(`region`!='Antarctica') # remove Antarctica from the map
world$region[world$region=='USA'] <- 'United States' # adjust country names to match in both dataframes
world$region[world$region=='UK'] <- 'United Kingdom'
worldBase <- ggplot() + geom_map(data=world, map=world, aes(x=`long`, y=`lat`, map_id=`region`, group=`group`), fill='lightgray', color='black') # create a base map of the world
world %>% filter(`region` %in% workData$Country) %>% rename(`Country`=`region`) %>% select(-6) -> world # filter for only countries in workData, rename region column to Country and remove subregion column
workDataMap <- inner_join(workData, world, by='Country') # join the workData and world dataframes together by Country
# this code is run in the hidden shiny_ui code chunk
#  worldBase + geom_polygon(data=workDataMap, aes(x=`long`, y=`lat`, group=group, fill=`AvgHrsWorked`)) +
#                           scale_fill_continuous(name='Average Annual Time\nSpent Working (hours)', na.value='gray50') + #
#                           labs(title='Average Annual Time Spent Working per Country') +
#                           theme(plot.title=element_text(size=20), # increase text size of map title
#                                 legend.title=element_text(size=16), # increase text size of map legend title
#                                 legend.text=element_text(size=14), # increase text size of map legend
#                                 legend.key.height=unit(0.5,'in'), # increase height of map legend key
#                                 legend.key.width=unit(0.5,'in'), # increase width of map legend key
#                                 axis.title.x=element_blank(), # remove axes, labels and background
#                                 axis.text.x=element_blank(),
#                                 axis.ticks.x=element_blank(),
#                                 axis.title.y=element_blank(),
#                                 axis.text.y=element_blank(),
#                                 axis.ticks.y=element_blank(),
#                                 panel.grid.major=element_blank(),
#                                 panel.grid.minor=element_blank(),
#                                 panel.background=element_blank())
# Chunk 4
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
verticalLayout(
plotOutput('WorkingTimeMap'),
wellPanel(
noUiSliderInput(inputId='Year', label='Select a Year:', min=2000, max=2019, value=2000, step=1, format=wNumbFormat(decimals=0, mark='')) # make a slider to select a year for the map
)
)
)
server <- function(input, output) {
workDataMapReactive <- reactive({ # create a reactive dataset
if(!is.null(input$Year)) {
workDataMap %>% filter(`Year`==input$Year) -> workDataMap # filter for the inputted year
}
workDataMap
})
output$WorkingTimeMap <- renderPlot({
workDataMapReactive <- workDataMapReactive()
# create a map using ggplot::geom_polygon
worldBase + geom_polygon(data=workDataMapReactive, aes(x=`long`, y=`lat`, group=group, fill=`AvgHrsWorked`)) +
scale_fill_continuous(name='Average Annual Time\nSpent Working (hours)', na.value='gray50') +
labs(title='Average Annual Time Spent Working per Country') +
theme(plot.title=element_text(size=20), # increase text size of map title
legend.title=element_text(size=16), # increase text size of map legend title
legend.text=element_text(size=14), # increase text size of map legend
legend.key.height=unit(0.5,'in'), # increase height of map legend key
legend.key.width=unit(0.5,'in'), # increase width of map legend key
axis.title.x=element_blank(), # remove axes, labels and background
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.background=element_blank())
})
}
shinyApp(ui=ui, server=server)
View(happinessData2019)
View(happinessData2017)
View(happinessData2016)
View(workAndHappinessData2019)
View(workData2018)
View(workAndHappinessData)
# Chunk 1
library(tidyverse)
# read in the OECD data on time spent working per country, remove duplicate employment type data for applicable countries, select data concerning country name, year and working time only, remove Turkey as it has NAs and rename applicable columns
workData=read.csv('data/ANHRS_21042021234045409.csv') %>% distinct(`Country`, `Time`, .keep_all=TRUE) %>%
select(2,8,15) %>%
filter(`Country`!='Turkey') %>%
rename(`AvgHrsWorked`=`Value`,
`Year`=`Time`)
# adjust country names to match in both dataframes
workData$Country[workData$Country=='Korea'] <- 'South Korea'
workData$Country[workData$Country=='Russian Federation'] <- 'Russia'
workData$Country[workData$Country=='Slovak Republic'] <- 'Slovakia'
# make a dataframe for each relevant year in workData
workData %>% filter(`Year`==2015) -> workData2015
workData %>% filter(`Year`==2016) -> workData2016
workData %>% filter(`Year`==2017) -> workData2017
workData %>% filter(`Year`==2018) -> workData2018
workData %>% filter(`Year`==2019) -> workData2019
# read in World Happiness Report data from 2015 to 2019, filter for countries in the workData dataframe and select columns with relevant data
happinessData2015=read.csv('data/2015.csv') %>% filter(`Country` %in% workData$Country) %>%
select(1,2,3,4,8,9,11)
happinessData2015$Year=2015 # add a Year column to specify the year of the data for animation purposes
happinessData2016=read.csv('data/2016.csv') %>% filter(`Country` %in% workData$Country) %>%
select(1,2,3,4,9,10,12)
happinessData2016$Year=2016 # add a Year column to specify the year of the data for animation purposes
happinessData2017=read.csv('data/2017.csv') %>% filter(`Country` %in% workData$Country)
happinessData2017$Year=2017 # add a Year column to specify the year of the data for animation purposes
# create a regions dataframe to allow for regions in happiness data for 2017 to 2019
regions=happinessData2016 %>% select(1,2)
happinessData2017 <- inner_join(regions, happinessData2017, by='Country')
happinessData2017 %>% select(1,2,3,4,9,10,11,14) -> happinessData2017
happinessData2018=read.csv('data/2018.csv') %>% filter(`Country.or.region` %in% workData$Country) %>%
rename(`Happiness.Rank`=`Overall.rank`,
`Country`=`Country.or.region`,
`Happiness.Score`=`Score`,
`Health..Life.Expectancy.`=`Healthy.life.expectancy`,
`Freedom`=`Freedom.to.make.life.choices`)
happinessData2018$Year=2018 # add a Year column to specify the year of the data for animation purposes
happinessData2018 <- inner_join(regions, happinessData2018, by='Country')
happinessData2018 %>% select(1,2,3,4,7,8,9,11) -> happinessData2018
happinessData2019=read.csv('data/2019.csv') %>% filter(`Country.or.region` %in% workData$Country) %>%
rename(`Happiness.Rank`=`Overall.rank`,
`Country`=`Country.or.region`,
`Happiness.Score`=`Score`,
`Health..Life.Expectancy.`=`Healthy.life.expectancy`,
`Freedom`=`Freedom.to.make.life.choices`)
happinessData2019$Year=2019 # add a Year column to specify the year of the data for animation purposes
happinessData2019 <- inner_join(regions, happinessData2019, by='Country')
happinessData2019 %>% select(1,2,3,4,7,8,9,11) -> happinessData2019
# join the work and happiness dataframe together for each year by Country
workAndHappinessData2015 <- inner_join(workData2015, happinessData2015, by='Country') %>% select(-2) %>%
rename(`Year`=`Year.y`)
workAndHappinessData2016 <- inner_join(workData2016, happinessData2016, by='Country') %>% select(-2) %>%
rename(`Year`=`Year.y`)
workAndHappinessData2017 <- inner_join(workData2017, happinessData2017, by='Country') %>% select(-2) %>%
rename(`Year`=`Year.y`)
workAndHappinessData2018 <- inner_join(workData2018, happinessData2018, by='Country') %>% select(-2) %>%
rename(`Year`=`Year.y`)
workAndHappinessData2019 <- inner_join(workData2019, happinessData2019, by='Country') %>% select(-2) %>%
rename(`Year`=`Year.y`)
# bind work and happiness dataframes for each year into one dataframe and move AvgHrsWorked column to position 3 using dplyr::relocate
workAndHappinessData <- bind_rows(workAndHappinessData2015,
workAndHappinessData2016,
workAndHappinessData2017,
workAndHappinessData2018,
workAndHappinessData2019) %>% relocate(`AvgHrsWorked`, .after=3) %>%
mutate_at(`AvgHrsWorked`, funs=(round., 0))
# Chunk 1
library(tidyverse)
# read in the OECD data on time spent working per country, remove duplicate employment type data for applicable countries, select data concerning country name, year and working time only, remove Turkey as it has NAs and rename applicable columns
workData=read.csv('data/ANHRS_21042021234045409.csv') %>% distinct(`Country`, `Time`, .keep_all=TRUE) %>%
select(2,8,15) %>%
filter(`Country`!='Turkey') %>%
rename(`AvgHrsWorked`=`Value`,
`Year`=`Time`)
# adjust country names to match in both dataframes
workData$Country[workData$Country=='Korea'] <- 'South Korea'
workData$Country[workData$Country=='Russian Federation'] <- 'Russia'
workData$Country[workData$Country=='Slovak Republic'] <- 'Slovakia'
# make a dataframe for each relevant year in workData
workData %>% filter(`Year`==2015) -> workData2015
workData %>% filter(`Year`==2016) -> workData2016
workData %>% filter(`Year`==2017) -> workData2017
workData %>% filter(`Year`==2018) -> workData2018
workData %>% filter(`Year`==2019) -> workData2019
# read in World Happiness Report data from 2015 to 2019, filter for countries in the workData dataframe and select columns with relevant data
happinessData2015=read.csv('data/2015.csv') %>% filter(`Country` %in% workData$Country) %>%
select(1,2,3,4,8,9,11)
happinessData2015$Year=2015 # add a Year column to specify the year of the data for animation purposes
happinessData2016=read.csv('data/2016.csv') %>% filter(`Country` %in% workData$Country) %>%
select(1,2,3,4,9,10,12)
happinessData2016$Year=2016 # add a Year column to specify the year of the data for animation purposes
happinessData2017=read.csv('data/2017.csv') %>% filter(`Country` %in% workData$Country)
happinessData2017$Year=2017 # add a Year column to specify the year of the data for animation purposes
# create a regions dataframe to allow for regions in happiness data for 2017 to 2019
regions=happinessData2016 %>% select(1,2)
happinessData2017 <- inner_join(regions, happinessData2017, by='Country')
happinessData2017 %>% select(1,2,3,4,9,10,11,14) -> happinessData2017
happinessData2018=read.csv('data/2018.csv') %>% filter(`Country.or.region` %in% workData$Country) %>%
rename(`Happiness.Rank`=`Overall.rank`,
`Country`=`Country.or.region`,
`Happiness.Score`=`Score`,
`Health..Life.Expectancy.`=`Healthy.life.expectancy`,
`Freedom`=`Freedom.to.make.life.choices`)
happinessData2018$Year=2018 # add a Year column to specify the year of the data for animation purposes
happinessData2018 <- inner_join(regions, happinessData2018, by='Country')
happinessData2018 %>% select(1,2,3,4,7,8,9,11) -> happinessData2018
happinessData2019=read.csv('data/2019.csv') %>% filter(`Country.or.region` %in% workData$Country) %>%
rename(`Happiness.Rank`=`Overall.rank`,
`Country`=`Country.or.region`,
`Happiness.Score`=`Score`,
`Health..Life.Expectancy.`=`Healthy.life.expectancy`,
`Freedom`=`Freedom.to.make.life.choices`)
happinessData2019$Year=2019 # add a Year column to specify the year of the data for animation purposes
happinessData2019 <- inner_join(regions, happinessData2019, by='Country')
happinessData2019 %>% select(1,2,3,4,7,8,9,11) -> happinessData2019
# join the work and happiness dataframe together for each year by Country
workAndHappinessData2015 <- inner_join(workData2015, happinessData2015, by='Country') %>% select(-2) %>%
rename(`Year`=`Year.y`)
workAndHappinessData2016 <- inner_join(workData2016, happinessData2016, by='Country') %>% select(-2) %>%
rename(`Year`=`Year.y`)
workAndHappinessData2017 <- inner_join(workData2017, happinessData2017, by='Country') %>% select(-2) %>%
rename(`Year`=`Year.y`)
workAndHappinessData2018 <- inner_join(workData2018, happinessData2018, by='Country') %>% select(-2) %>%
rename(`Year`=`Year.y`)
workAndHappinessData2019 <- inner_join(workData2019, happinessData2019, by='Country') %>% select(-2) %>%
rename(`Year`=`Year.y`)
# bind work and happiness dataframes for each year into one dataframe and move AvgHrsWorked column to position 3 using dplyr::relocate
workAndHappinessData <- bind_rows(workAndHappinessData2015,
workAndHappinessData2016,
workAndHappinessData2017,
workAndHappinessData2018,
workAndHappinessData2019) %>% relocate(`AvgHrsWorked`, .after=3) %>%
mutate_at(`AvgHrsWorked`, funs=(round(., 0)))
# Chunk 1
library(tidyverse)
# read in the OECD data on time spent working per country, remove duplicate employment type data for applicable countries, select data concerning country name, year and working time only, remove Turkey as it has NAs and rename applicable columns
workData=read.csv('data/ANHRS_21042021234045409.csv') %>% distinct(`Country`, `Time`, .keep_all=TRUE) %>%
select(2,8,15) %>%
filter(`Country`!='Turkey') %>%
rename(`AvgHrsWorked`=`Value`,
`Year`=`Time`)
# adjust country names to match in both dataframes
workData$Country[workData$Country=='Korea'] <- 'South Korea'
workData$Country[workData$Country=='Russian Federation'] <- 'Russia'
workData$Country[workData$Country=='Slovak Republic'] <- 'Slovakia'
# make a dataframe for each relevant year in workData
workData %>% filter(`Year`==2015) -> workData2015
workData %>% filter(`Year`==2016) -> workData2016
workData %>% filter(`Year`==2017) -> workData2017
workData %>% filter(`Year`==2018) -> workData2018
workData %>% filter(`Year`==2019) -> workData2019
# read in World Happiness Report data from 2015 to 2019, filter for countries in the workData dataframe and select columns with relevant data
happinessData2015=read.csv('data/2015.csv') %>% filter(`Country` %in% workData$Country) %>%
select(1,2,3,4,8,9,11)
happinessData2015$Year=2015 # add a Year column to specify the year of the data for animation purposes
happinessData2016=read.csv('data/2016.csv') %>% filter(`Country` %in% workData$Country) %>%
select(1,2,3,4,9,10,12)
happinessData2016$Year=2016 # add a Year column to specify the year of the data for animation purposes
happinessData2017=read.csv('data/2017.csv') %>% filter(`Country` %in% workData$Country)
happinessData2017$Year=2017 # add a Year column to specify the year of the data for animation purposes
# create a regions dataframe to allow for regions in happiness data for 2017 to 2019
regions=happinessData2016 %>% select(1,2)
happinessData2017 <- inner_join(regions, happinessData2017, by='Country')
happinessData2017 %>% select(1,2,3,4,9,10,11,14) -> happinessData2017
happinessData2018=read.csv('data/2018.csv') %>% filter(`Country.or.region` %in% workData$Country) %>%
rename(`Happiness.Rank`=`Overall.rank`,
`Country`=`Country.or.region`,
`Happiness.Score`=`Score`,
`Health..Life.Expectancy.`=`Healthy.life.expectancy`,
`Freedom`=`Freedom.to.make.life.choices`)
happinessData2018$Year=2018 # add a Year column to specify the year of the data for animation purposes
happinessData2018 <- inner_join(regions, happinessData2018, by='Country')
happinessData2018 %>% select(1,2,3,4,7,8,9,11) -> happinessData2018
happinessData2019=read.csv('data/2019.csv') %>% filter(`Country.or.region` %in% workData$Country) %>%
rename(`Happiness.Rank`=`Overall.rank`,
`Country`=`Country.or.region`,
`Happiness.Score`=`Score`,
`Health..Life.Expectancy.`=`Healthy.life.expectancy`,
`Freedom`=`Freedom.to.make.life.choices`)
happinessData2019$Year=2019 # add a Year column to specify the year of the data for animation purposes
happinessData2019 <- inner_join(regions, happinessData2019, by='Country')
happinessData2019 %>% select(1,2,3,4,7,8,9,11) -> happinessData2019
# join the work and happiness dataframe together for each year by Country
workAndHappinessData2015 <- inner_join(workData2015, happinessData2015, by='Country') %>% select(-2) %>%
rename(`Year`=`Year.y`)
workAndHappinessData2016 <- inner_join(workData2016, happinessData2016, by='Country') %>% select(-2) %>%
rename(`Year`=`Year.y`)
workAndHappinessData2017 <- inner_join(workData2017, happinessData2017, by='Country') %>% select(-2) %>%
rename(`Year`=`Year.y`)
workAndHappinessData2018 <- inner_join(workData2018, happinessData2018, by='Country') %>% select(-2) %>%
rename(`Year`=`Year.y`)
workAndHappinessData2019 <- inner_join(workData2019, happinessData2019, by='Country') %>% select(-2) %>%
rename(`Year`=`Year.y`)
# bind work and happiness dataframes for each year into one dataframe and move AvgHrsWorked column to position 3 using dplyr::relocate
workAndHappinessData <- bind_rows(workAndHappinessData2015,
workAndHappinessData2016,
workAndHappinessData2017,
workAndHappinessData2018,
workAndHappinessData2019) %>% relocate(`AvgHrsWorked`, .after=3) %>%
mutate_at(`AvgHrsWorked`, round(., 0))
# Chunk 1
library(tidyverse)
# read in the OECD data on time spent working per country, remove duplicate employment type data for applicable countries, select data concerning country name, year and working time only, remove Turkey as it has NAs and rename applicable columns
workData=read.csv('data/ANHRS_21042021234045409.csv') %>% distinct(`Country`, `Time`, .keep_all=TRUE) %>%
select(2,8,15) %>%
filter(`Country`!='Turkey') %>%
rename(`AvgHrsWorked`=`Value`,
`Year`=`Time`)
# adjust country names to match in both dataframes
workData$Country[workData$Country=='Korea'] <- 'South Korea'
workData$Country[workData$Country=='Russian Federation'] <- 'Russia'
workData$Country[workData$Country=='Slovak Republic'] <- 'Slovakia'
# make a dataframe for each relevant year in workData
workData %>% filter(`Year`==2015) -> workData2015
workData %>% filter(`Year`==2016) -> workData2016
workData %>% filter(`Year`==2017) -> workData2017
workData %>% filter(`Year`==2018) -> workData2018
workData %>% filter(`Year`==2019) -> workData2019
# read in World Happiness Report data from 2015 to 2019, filter for countries in the workData dataframe and select columns with relevant data
happinessData2015=read.csv('data/2015.csv') %>% filter(`Country` %in% workData$Country) %>%
select(1,2,3,4,8,9,11)
happinessData2015$Year=2015 # add a Year column to specify the year of the data for animation purposes
happinessData2016=read.csv('data/2016.csv') %>% filter(`Country` %in% workData$Country) %>%
select(1,2,3,4,9,10,12)
happinessData2016$Year=2016 # add a Year column to specify the year of the data for animation purposes
happinessData2017=read.csv('data/2017.csv') %>% filter(`Country` %in% workData$Country)
happinessData2017$Year=2017 # add a Year column to specify the year of the data for animation purposes
# create a regions dataframe to allow for regions in happiness data for 2017 to 2019
regions=happinessData2016 %>% select(1,2)
happinessData2017 <- inner_join(regions, happinessData2017, by='Country')
happinessData2017 %>% select(1,2,3,4,9,10,11,14) -> happinessData2017
happinessData2018=read.csv('data/2018.csv') %>% filter(`Country.or.region` %in% workData$Country) %>%
rename(`Happiness.Rank`=`Overall.rank`,
`Country`=`Country.or.region`,
`Happiness.Score`=`Score`,
`Health..Life.Expectancy.`=`Healthy.life.expectancy`,
`Freedom`=`Freedom.to.make.life.choices`)
happinessData2018$Year=2018 # add a Year column to specify the year of the data for animation purposes
happinessData2018 <- inner_join(regions, happinessData2018, by='Country')
happinessData2018 %>% select(1,2,3,4,7,8,9,11) -> happinessData2018
happinessData2019=read.csv('data/2019.csv') %>% filter(`Country.or.region` %in% workData$Country) %>%
rename(`Happiness.Rank`=`Overall.rank`,
`Country`=`Country.or.region`,
`Happiness.Score`=`Score`,
`Health..Life.Expectancy.`=`Healthy.life.expectancy`,
`Freedom`=`Freedom.to.make.life.choices`)
happinessData2019$Year=2019 # add a Year column to specify the year of the data for animation purposes
happinessData2019 <- inner_join(regions, happinessData2019, by='Country')
happinessData2019 %>% select(1,2,3,4,7,8,9,11) -> happinessData2019
# join the work and happiness dataframe together for each year by Country
workAndHappinessData2015 <- inner_join(workData2015, happinessData2015, by='Country') %>% select(-2) %>%
rename(`Year`=`Year.y`)
workAndHappinessData2016 <- inner_join(workData2016, happinessData2016, by='Country') %>% select(-2) %>%
rename(`Year`=`Year.y`)
workAndHappinessData2017 <- inner_join(workData2017, happinessData2017, by='Country') %>% select(-2) %>%
rename(`Year`=`Year.y`)
workAndHappinessData2018 <- inner_join(workData2018, happinessData2018, by='Country') %>% select(-2) %>%
rename(`Year`=`Year.y`)
workAndHappinessData2019 <- inner_join(workData2019, happinessData2019, by='Country') %>% select(-2) %>%
rename(`Year`=`Year.y`)
# bind work and happiness dataframes for each year into one dataframe and move AvgHrsWorked column to position 3 using dplyr::relocate
workAndHappinessData <- bind_rows(workAndHappinessData2015,
workAndHappinessData2016,
workAndHappinessData2017,
workAndHappinessData2018,
workAndHappinessData2019) %>% relocate(`AvgHrsWorked`, .after=3)
workAndHappinessData$AvgHrsWorked <- round(workAndHappinessData$AvgHrsWorked) # round the time spent working column to integers
View(workAndHappinessData)
install.packages('rmdformats')
remotes::install_github("juba/rmdformats")
